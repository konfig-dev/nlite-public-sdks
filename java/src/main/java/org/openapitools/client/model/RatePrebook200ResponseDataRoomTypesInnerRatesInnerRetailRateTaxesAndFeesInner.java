/*
 * nlite API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RatePrebook200ResponseDataRoomTypesInnerRatesInnerRetailRateTaxesAndFeesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-10T16:56:49.845+01:00[Africa/Casablanca]")
public class RatePrebook200ResponseDataRoomTypesInnerRatesInnerRetailRateTaxesAndFeesInner {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private BigDecimal amount;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_INCLUDED = "included";
  @SerializedName(SERIALIZED_NAME_INCLUDED)
  private Boolean included;

  public RatePrebook200ResponseDataRoomTypesInnerRatesInnerRetailRateTaxesAndFeesInner() {
  }

  public RatePrebook200ResponseDataRoomTypesInnerRatesInnerRetailRateTaxesAndFeesInner amount(BigDecimal amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "")

  public BigDecimal getAmount() {
    return amount;
  }


  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }


  public RatePrebook200ResponseDataRoomTypesInnerRatesInnerRetailRateTaxesAndFeesInner currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "EUR", value = "")

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public RatePrebook200ResponseDataRoomTypesInnerRatesInnerRetailRateTaxesAndFeesInner description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "roomTax", value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public RatePrebook200ResponseDataRoomTypesInnerRatesInnerRetailRateTaxesAndFeesInner included(Boolean included) {
    
    this.included = included;
    return this;
  }

   /**
   * Get included
   * @return included
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "")

  public Boolean getIncluded() {
    return included;
  }


  public void setIncluded(Boolean included) {
    this.included = included;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RatePrebook200ResponseDataRoomTypesInnerRatesInnerRetailRateTaxesAndFeesInner ratePrebook200ResponseDataRoomTypesInnerRatesInnerRetailRateTaxesAndFeesInner = (RatePrebook200ResponseDataRoomTypesInnerRatesInnerRetailRateTaxesAndFeesInner) o;
    return Objects.equals(this.amount, ratePrebook200ResponseDataRoomTypesInnerRatesInnerRetailRateTaxesAndFeesInner.amount) &&
        Objects.equals(this.currency, ratePrebook200ResponseDataRoomTypesInnerRatesInnerRetailRateTaxesAndFeesInner.currency) &&
        Objects.equals(this.description, ratePrebook200ResponseDataRoomTypesInnerRatesInnerRetailRateTaxesAndFeesInner.description) &&
        Objects.equals(this.included, ratePrebook200ResponseDataRoomTypesInnerRatesInnerRetailRateTaxesAndFeesInner.included);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, currency, description, included);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RatePrebook200ResponseDataRoomTypesInnerRatesInnerRetailRateTaxesAndFeesInner {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    included: ").append(toIndentedString(included)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("currency");
    openapiFields.add("description");
    openapiFields.add("included");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RatePrebook200ResponseDataRoomTypesInnerRatesInnerRetailRateTaxesAndFeesInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RatePrebook200ResponseDataRoomTypesInnerRatesInnerRetailRateTaxesAndFeesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RatePrebook200ResponseDataRoomTypesInnerRatesInnerRetailRateTaxesAndFeesInner is not found in the empty JSON string", RatePrebook200ResponseDataRoomTypesInnerRatesInnerRetailRateTaxesAndFeesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!RatePrebook200ResponseDataRoomTypesInnerRatesInnerRetailRateTaxesAndFeesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RatePrebook200ResponseDataRoomTypesInnerRatesInnerRetailRateTaxesAndFeesInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RatePrebook200ResponseDataRoomTypesInnerRatesInnerRetailRateTaxesAndFeesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RatePrebook200ResponseDataRoomTypesInnerRatesInnerRetailRateTaxesAndFeesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RatePrebook200ResponseDataRoomTypesInnerRatesInnerRetailRateTaxesAndFeesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RatePrebook200ResponseDataRoomTypesInnerRatesInnerRetailRateTaxesAndFeesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<RatePrebook200ResponseDataRoomTypesInnerRatesInnerRetailRateTaxesAndFeesInner>() {
           @Override
           public void write(JsonWriter out, RatePrebook200ResponseDataRoomTypesInnerRatesInnerRetailRateTaxesAndFeesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RatePrebook200ResponseDataRoomTypesInnerRatesInnerRetailRateTaxesAndFeesInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RatePrebook200ResponseDataRoomTypesInnerRatesInnerRetailRateTaxesAndFeesInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RatePrebook200ResponseDataRoomTypesInnerRatesInnerRetailRateTaxesAndFeesInner
  * @throws IOException if the JSON string is invalid with respect to RatePrebook200ResponseDataRoomTypesInnerRatesInnerRetailRateTaxesAndFeesInner
  */
  public static RatePrebook200ResponseDataRoomTypesInnerRatesInnerRetailRateTaxesAndFeesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RatePrebook200ResponseDataRoomTypesInnerRatesInnerRetailRateTaxesAndFeesInner.class);
  }

 /**
  * Convert an instance of RatePrebook200ResponseDataRoomTypesInnerRatesInnerRetailRateTaxesAndFeesInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

