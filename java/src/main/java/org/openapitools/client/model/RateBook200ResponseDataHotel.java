/*
 * nlite API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import org.openapitools.client.model.RateBook200ResponseDataHotelAddress;
import org.openapitools.client.model.RateBook200ResponseDataHotelLocation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RateBook200ResponseDataHotel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-10T16:56:49.845+01:00[Africa/Casablanca]")
public class RateBook200ResponseDataHotel {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private RateBook200ResponseDataHotelAddress address;

  public static final String SERIALIZED_NAME_HOTEL_ID = "hotelId";
  @SerializedName(SERIALIZED_NAME_HOTEL_ID)
  private String hotelId;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private RateBook200ResponseDataHotelLocation location;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STAR_RATING = "starRating";
  @SerializedName(SERIALIZED_NAME_STAR_RATING)
  private BigDecimal starRating;

  public RateBook200ResponseDataHotel() {
  }

  public RateBook200ResponseDataHotel address(RateBook200ResponseDataHotelAddress address) {
    
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public RateBook200ResponseDataHotelAddress getAddress() {
    return address;
  }


  public void setAddress(RateBook200ResponseDataHotelAddress address) {
    this.address = address;
  }


  public RateBook200ResponseDataHotel hotelId(String hotelId) {
    
    this.hotelId = hotelId;
    return this;
  }

   /**
   * Get hotelId
   * @return hotelId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "6295", value = "")

  public String getHotelId() {
    return hotelId;
  }


  public void setHotelId(String hotelId) {
    this.hotelId = hotelId;
  }


  public RateBook200ResponseDataHotel location(RateBook200ResponseDataHotelLocation location) {
    
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public RateBook200ResponseDataHotelLocation getLocation() {
    return location;
  }


  public void setLocation(RateBook200ResponseDataHotelLocation location) {
    this.location = location;
  }


  public RateBook200ResponseDataHotel name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "The Manhattan at Times Square Hotel", value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public RateBook200ResponseDataHotel starRating(BigDecimal starRating) {
    
    this.starRating = starRating;
    return this;
  }

   /**
   * Get starRating
   * @return starRating
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "4", value = "")

  public BigDecimal getStarRating() {
    return starRating;
  }


  public void setStarRating(BigDecimal starRating) {
    this.starRating = starRating;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RateBook200ResponseDataHotel rateBook200ResponseDataHotel = (RateBook200ResponseDataHotel) o;
    return Objects.equals(this.address, rateBook200ResponseDataHotel.address) &&
        Objects.equals(this.hotelId, rateBook200ResponseDataHotel.hotelId) &&
        Objects.equals(this.location, rateBook200ResponseDataHotel.location) &&
        Objects.equals(this.name, rateBook200ResponseDataHotel.name) &&
        Objects.equals(this.starRating, rateBook200ResponseDataHotel.starRating);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, hotelId, location, name, starRating);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RateBook200ResponseDataHotel {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    hotelId: ").append(toIndentedString(hotelId)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    starRating: ").append(toIndentedString(starRating)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("hotelId");
    openapiFields.add("location");
    openapiFields.add("name");
    openapiFields.add("starRating");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RateBook200ResponseDataHotel
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RateBook200ResponseDataHotel.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RateBook200ResponseDataHotel is not found in the empty JSON string", RateBook200ResponseDataHotel.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!RateBook200ResponseDataHotel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RateBook200ResponseDataHotel` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        RateBook200ResponseDataHotelAddress.validateJsonObject(jsonObj.getAsJsonObject("address"));
      }
      if ((jsonObj.get("hotelId") != null && !jsonObj.get("hotelId").isJsonNull()) && !jsonObj.get("hotelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hotelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hotelId").toString()));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        RateBook200ResponseDataHotelLocation.validateJsonObject(jsonObj.getAsJsonObject("location"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RateBook200ResponseDataHotel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RateBook200ResponseDataHotel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RateBook200ResponseDataHotel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RateBook200ResponseDataHotel.class));

       return (TypeAdapter<T>) new TypeAdapter<RateBook200ResponseDataHotel>() {
           @Override
           public void write(JsonWriter out, RateBook200ResponseDataHotel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RateBook200ResponseDataHotel read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RateBook200ResponseDataHotel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RateBook200ResponseDataHotel
  * @throws IOException if the JSON string is invalid with respect to RateBook200ResponseDataHotel
  */
  public static RateBook200ResponseDataHotel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RateBook200ResponseDataHotel.class);
  }

 /**
  * Convert an instance of RateBook200ResponseDataHotel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

