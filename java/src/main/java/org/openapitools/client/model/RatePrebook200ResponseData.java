/*
 * nlite API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.RatePrebook200ResponseDataRoomTypesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RatePrebook200ResponseData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-10T16:56:49.845+01:00[Africa/Casablanca]")
public class RatePrebook200ResponseData {
  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_HOTEL_ID = "hotelId";
  @SerializedName(SERIALIZED_NAME_HOTEL_ID)
  private String hotelId;

  public static final String SERIALIZED_NAME_PREBOOK_ID = "prebookId";
  @SerializedName(SERIALIZED_NAME_PREBOOK_ID)
  private String prebookId;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private BigDecimal price;

  public static final String SERIALIZED_NAME_ROOM_TYPES = "roomTypes";
  @SerializedName(SERIALIZED_NAME_ROOM_TYPES)
  private List<RatePrebook200ResponseDataRoomTypesInner> roomTypes = null;

  public RatePrebook200ResponseData() {
  }

  public RatePrebook200ResponseData currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "EUR", value = "")

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public RatePrebook200ResponseData hotelId(String hotelId) {
    
    this.hotelId = hotelId;
    return this;
  }

   /**
   * Get hotelId
   * @return hotelId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "112939", value = "")

  public String getHotelId() {
    return hotelId;
  }


  public void setHotelId(String hotelId) {
    this.hotelId = hotelId;
  }


  public RatePrebook200ResponseData prebookId(String prebookId) {
    
    this.prebookId = prebookId;
    return this;
  }

   /**
   * Get prebookId
   * @return prebookId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "_qps8QIzi", value = "")

  public String getPrebookId() {
    return prebookId;
  }


  public void setPrebookId(String prebookId) {
    this.prebookId = prebookId;
  }


  public RatePrebook200ResponseData price(BigDecimal price) {
    
    this.price = price;
    return this;
  }

   /**
   * Get price
   * @return price
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "137.02458727256", value = "")

  public BigDecimal getPrice() {
    return price;
  }


  public void setPrice(BigDecimal price) {
    this.price = price;
  }


  public RatePrebook200ResponseData roomTypes(List<RatePrebook200ResponseDataRoomTypesInner> roomTypes) {
    
    this.roomTypes = roomTypes;
    return this;
  }

  public RatePrebook200ResponseData addRoomTypesItem(RatePrebook200ResponseDataRoomTypesInner roomTypesItem) {
    if (this.roomTypes == null) {
      this.roomTypes = new ArrayList<>();
    }
    this.roomTypes.add(roomTypesItem);
    return this;
  }

   /**
   * Get roomTypes
   * @return roomTypes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[{\"maxOccupancy\":1,\"rates\":[{\"cancellationPolicies\":{\"cancelPolicyInfos\":[{\"amount\":137.02458727256,\"cancelTime\":\"2023-01-10\",\"type\":\"amount\"}],\"hotelRemarks\":[],\"refundableTag\":\"RFN\"},\"maxOccupancy\":1,\"name\":\"Run of House/1 Bed - Room Only\",\"rateId\":\"G4ZDONJWMUZDANTGGY3DEMBWHA3GMNZVG4ZTMNJSMYZTCMRQGYZDMNJWGR6DCIZSGAZDGMBRGE2XYMRQGIZTAMJRGZ6GK3S7KVJXYTKBPRCVKUT4GFATAQ34GE3DSOD4IJIWCOKWPQYTMNRTGYZDQOBSGYZDONCNJ5JE2IZRGEZDSMZZEMZTAOBNGEYTEOJTHF6FERSOPQZDAMRTGAYTCMD4GV6DCMZXGAZCGUSPENJEMTRDGIYDEMZNGAYS2MJQ\",\"retailRate\":{\"taxesAndFees\":[{\"amount\":0,\"currency\":\"EUR\",\"description\":\"roomTax\",\"included\":true},{\"amount\":0,\"currency\":\"EUR\",\"description\":\"salesTax\",\"included\":true},{\"amount\":0,\"currency\":\"EUR\",\"description\":\"otherCharges\",\"included\":true}],\"total\":[{\"amount\":137.02458727256,\"currency\":\"EUR\"}]}}]}]", value = "")

  public List<RatePrebook200ResponseDataRoomTypesInner> getRoomTypes() {
    return roomTypes;
  }


  public void setRoomTypes(List<RatePrebook200ResponseDataRoomTypesInner> roomTypes) {
    this.roomTypes = roomTypes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RatePrebook200ResponseData ratePrebook200ResponseData = (RatePrebook200ResponseData) o;
    return Objects.equals(this.currency, ratePrebook200ResponseData.currency) &&
        Objects.equals(this.hotelId, ratePrebook200ResponseData.hotelId) &&
        Objects.equals(this.prebookId, ratePrebook200ResponseData.prebookId) &&
        Objects.equals(this.price, ratePrebook200ResponseData.price) &&
        Objects.equals(this.roomTypes, ratePrebook200ResponseData.roomTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currency, hotelId, prebookId, price, roomTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RatePrebook200ResponseData {\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    hotelId: ").append(toIndentedString(hotelId)).append("\n");
    sb.append("    prebookId: ").append(toIndentedString(prebookId)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    roomTypes: ").append(toIndentedString(roomTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currency");
    openapiFields.add("hotelId");
    openapiFields.add("prebookId");
    openapiFields.add("price");
    openapiFields.add("roomTypes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RatePrebook200ResponseData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RatePrebook200ResponseData.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RatePrebook200ResponseData is not found in the empty JSON string", RatePrebook200ResponseData.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!RatePrebook200ResponseData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RatePrebook200ResponseData` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("hotelId") != null && !jsonObj.get("hotelId").isJsonNull()) && !jsonObj.get("hotelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hotelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hotelId").toString()));
      }
      if ((jsonObj.get("prebookId") != null && !jsonObj.get("prebookId").isJsonNull()) && !jsonObj.get("prebookId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prebookId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prebookId").toString()));
      }
      if (jsonObj.get("roomTypes") != null && !jsonObj.get("roomTypes").isJsonNull()) {
        JsonArray jsonArrayroomTypes = jsonObj.getAsJsonArray("roomTypes");
        if (jsonArrayroomTypes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("roomTypes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `roomTypes` to be an array in the JSON string but got `%s`", jsonObj.get("roomTypes").toString()));
          }

          // validate the optional field `roomTypes` (array)
          for (int i = 0; i < jsonArrayroomTypes.size(); i++) {
            RatePrebook200ResponseDataRoomTypesInner.validateJsonObject(jsonArrayroomTypes.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RatePrebook200ResponseData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RatePrebook200ResponseData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RatePrebook200ResponseData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RatePrebook200ResponseData.class));

       return (TypeAdapter<T>) new TypeAdapter<RatePrebook200ResponseData>() {
           @Override
           public void write(JsonWriter out, RatePrebook200ResponseData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RatePrebook200ResponseData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RatePrebook200ResponseData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RatePrebook200ResponseData
  * @throws IOException if the JSON string is invalid with respect to RatePrebook200ResponseData
  */
  public static RatePrebook200ResponseData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RatePrebook200ResponseData.class);
  }

 /**
  * Convert an instance of RatePrebook200ResponseData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

