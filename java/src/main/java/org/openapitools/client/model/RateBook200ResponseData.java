/*
 * nlite API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.RateBook200ResponseDataBookedRoomsInner;
import org.openapitools.client.model.RateBook200ResponseDataCancellation;
import org.openapitools.client.model.RateBook200ResponseDataCancellationPolicies;
import org.openapitools.client.model.RateBook200ResponseDataContact;
import org.openapitools.client.model.RateBook200ResponseDataHotel;
import org.openapitools.client.model.RateBook200ResponseDataNotes;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RateBook200ResponseData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-10T16:56:49.845+01:00[Africa/Casablanca]")
public class RateBook200ResponseData {
  public static final String SERIALIZED_NAME_BOOKED_ROOMS = "bookedRooms";
  @SerializedName(SERIALIZED_NAME_BOOKED_ROOMS)
  private List<RateBook200ResponseDataBookedRoomsInner> bookedRooms = null;

  public static final String SERIALIZED_NAME_BOOKING_ID = "bookingId";
  @SerializedName(SERIALIZED_NAME_BOOKING_ID)
  private String bookingId;

  public static final String SERIALIZED_NAME_CANCELLATION = "cancellation";
  @SerializedName(SERIALIZED_NAME_CANCELLATION)
  private RateBook200ResponseDataCancellation cancellation;

  public static final String SERIALIZED_NAME_CANCELLATION_POLICIES = "cancellationPolicies";
  @SerializedName(SERIALIZED_NAME_CANCELLATION_POLICIES)
  private RateBook200ResponseDataCancellationPolicies cancellationPolicies;

  public static final String SERIALIZED_NAME_CONTACT = "contact";
  @SerializedName(SERIALIZED_NAME_CONTACT)
  private RateBook200ResponseDataContact contact;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_END = "end";
  @SerializedName(SERIALIZED_NAME_END)
  private String end;

  public static final String SERIALIZED_NAME_HOTEL = "hotel";
  @SerializedName(SERIALIZED_NAME_HOTEL)
  private RateBook200ResponseDataHotel hotel;

  public static final String SERIALIZED_NAME_HOTEL_CONFIRMATION_CODE = "hotelConfirmationCode";
  @SerializedName(SERIALIZED_NAME_HOTEL_CONFIRMATION_CODE)
  private String hotelConfirmationCode;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private RateBook200ResponseDataNotes notes;

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private String start;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public RateBook200ResponseData() {
  }

  public RateBook200ResponseData bookedRooms(List<RateBook200ResponseDataBookedRoomsInner> bookedRooms) {
    
    this.bookedRooms = bookedRooms;
    return this;
  }

  public RateBook200ResponseData addBookedRoomsItem(RateBook200ResponseDataBookedRoomsInner bookedRoomsItem) {
    if (this.bookedRooms == null) {
      this.bookedRooms = new ArrayList<>();
    }
    this.bookedRooms.add(bookedRoomsItem);
    return this;
  }

   /**
   * Get bookedRooms
   * @return bookedRooms
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[{\"adults\":2,\"children\":0,\"rate\":{\"maxOccupancy\":2,\"retailRate\":{\"total\":{\"amount\":395.59,\"currency\":\"USD\"}}},\"roomType\":{\"name\":\"Standard Room\"}}]", value = "")

  public List<RateBook200ResponseDataBookedRoomsInner> getBookedRooms() {
    return bookedRooms;
  }


  public void setBookedRooms(List<RateBook200ResponseDataBookedRoomsInner> bookedRooms) {
    this.bookedRooms = bookedRooms;
  }


  public RateBook200ResponseData bookingId(String bookingId) {
    
    this.bookingId = bookingId;
    return this;
  }

   /**
   * Get bookingId
   * @return bookingId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "SAD4k_Fwm", value = "")

  public String getBookingId() {
    return bookingId;
  }


  public void setBookingId(String bookingId) {
    this.bookingId = bookingId;
  }


  public RateBook200ResponseData cancellation(RateBook200ResponseDataCancellation cancellation) {
    
    this.cancellation = cancellation;
    return this;
  }

   /**
   * Get cancellation
   * @return cancellation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public RateBook200ResponseDataCancellation getCancellation() {
    return cancellation;
  }


  public void setCancellation(RateBook200ResponseDataCancellation cancellation) {
    this.cancellation = cancellation;
  }


  public RateBook200ResponseData cancellationPolicies(RateBook200ResponseDataCancellationPolicies cancellationPolicies) {
    
    this.cancellationPolicies = cancellationPolicies;
    return this;
  }

   /**
   * Get cancellationPolicies
   * @return cancellationPolicies
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public RateBook200ResponseDataCancellationPolicies getCancellationPolicies() {
    return cancellationPolicies;
  }


  public void setCancellationPolicies(RateBook200ResponseDataCancellationPolicies cancellationPolicies) {
    this.cancellationPolicies = cancellationPolicies;
  }


  public RateBook200ResponseData contact(RateBook200ResponseDataContact contact) {
    
    this.contact = contact;
    return this;
  }

   /**
   * Get contact
   * @return contact
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public RateBook200ResponseDataContact getContact() {
    return contact;
  }


  public void setContact(RateBook200ResponseDataContact contact) {
    this.contact = contact;
  }


  public RateBook200ResponseData createdAt(String createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-08-02T16:22:40Z", value = "")

  public String getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public RateBook200ResponseData end(String end) {
    
    this.end = end;
    return this;
  }

   /**
   * Get end
   * @return end
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-12-11", value = "")

  public String getEnd() {
    return end;
  }


  public void setEnd(String end) {
    this.end = end;
  }


  public RateBook200ResponseData hotel(RateBook200ResponseDataHotel hotel) {
    
    this.hotel = hotel;
    return this;
  }

   /**
   * Get hotel
   * @return hotel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public RateBook200ResponseDataHotel getHotel() {
    return hotel;
  }


  public void setHotel(RateBook200ResponseDataHotel hotel) {
    this.hotel = hotel;
  }


  public RateBook200ResponseData hotelConfirmationCode(String hotelConfirmationCode) {
    
    this.hotelConfirmationCode = hotelConfirmationCode;
    return this;
  }

   /**
   * Get hotelConfirmationCode
   * @return hotelConfirmationCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "", value = "")

  public String getHotelConfirmationCode() {
    return hotelConfirmationCode;
  }


  public void setHotelConfirmationCode(String hotelConfirmationCode) {
    this.hotelConfirmationCode = hotelConfirmationCode;
  }


  public RateBook200ResponseData notes(RateBook200ResponseDataNotes notes) {
    
    this.notes = notes;
    return this;
  }

   /**
   * Get notes
   * @return notes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public RateBook200ResponseDataNotes getNotes() {
    return notes;
  }


  public void setNotes(RateBook200ResponseDataNotes notes) {
    this.notes = notes;
  }


  public RateBook200ResponseData start(String start) {
    
    this.start = start;
    return this;
  }

   /**
   * Get start
   * @return start
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-12-10", value = "")

  public String getStart() {
    return start;
  }


  public void setStart(String start) {
    this.start = start;
  }


  public RateBook200ResponseData status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CONFIRMED", value = "")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RateBook200ResponseData rateBook200ResponseData = (RateBook200ResponseData) o;
    return Objects.equals(this.bookedRooms, rateBook200ResponseData.bookedRooms) &&
        Objects.equals(this.bookingId, rateBook200ResponseData.bookingId) &&
        Objects.equals(this.cancellation, rateBook200ResponseData.cancellation) &&
        Objects.equals(this.cancellationPolicies, rateBook200ResponseData.cancellationPolicies) &&
        Objects.equals(this.contact, rateBook200ResponseData.contact) &&
        Objects.equals(this.createdAt, rateBook200ResponseData.createdAt) &&
        Objects.equals(this.end, rateBook200ResponseData.end) &&
        Objects.equals(this.hotel, rateBook200ResponseData.hotel) &&
        Objects.equals(this.hotelConfirmationCode, rateBook200ResponseData.hotelConfirmationCode) &&
        Objects.equals(this.notes, rateBook200ResponseData.notes) &&
        Objects.equals(this.start, rateBook200ResponseData.start) &&
        Objects.equals(this.status, rateBook200ResponseData.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bookedRooms, bookingId, cancellation, cancellationPolicies, contact, createdAt, end, hotel, hotelConfirmationCode, notes, start, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RateBook200ResponseData {\n");
    sb.append("    bookedRooms: ").append(toIndentedString(bookedRooms)).append("\n");
    sb.append("    bookingId: ").append(toIndentedString(bookingId)).append("\n");
    sb.append("    cancellation: ").append(toIndentedString(cancellation)).append("\n");
    sb.append("    cancellationPolicies: ").append(toIndentedString(cancellationPolicies)).append("\n");
    sb.append("    contact: ").append(toIndentedString(contact)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    hotel: ").append(toIndentedString(hotel)).append("\n");
    sb.append("    hotelConfirmationCode: ").append(toIndentedString(hotelConfirmationCode)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bookedRooms");
    openapiFields.add("bookingId");
    openapiFields.add("cancellation");
    openapiFields.add("cancellationPolicies");
    openapiFields.add("contact");
    openapiFields.add("createdAt");
    openapiFields.add("end");
    openapiFields.add("hotel");
    openapiFields.add("hotelConfirmationCode");
    openapiFields.add("notes");
    openapiFields.add("start");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RateBook200ResponseData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RateBook200ResponseData.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RateBook200ResponseData is not found in the empty JSON string", RateBook200ResponseData.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!RateBook200ResponseData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RateBook200ResponseData` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("bookedRooms") != null && !jsonObj.get("bookedRooms").isJsonNull()) {
        JsonArray jsonArraybookedRooms = jsonObj.getAsJsonArray("bookedRooms");
        if (jsonArraybookedRooms != null) {
          // ensure the json data is an array
          if (!jsonObj.get("bookedRooms").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `bookedRooms` to be an array in the JSON string but got `%s`", jsonObj.get("bookedRooms").toString()));
          }

          // validate the optional field `bookedRooms` (array)
          for (int i = 0; i < jsonArraybookedRooms.size(); i++) {
            RateBook200ResponseDataBookedRoomsInner.validateJsonObject(jsonArraybookedRooms.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("bookingId") != null && !jsonObj.get("bookingId").isJsonNull()) && !jsonObj.get("bookingId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bookingId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bookingId").toString()));
      }
      // validate the optional field `cancellation`
      if (jsonObj.get("cancellation") != null && !jsonObj.get("cancellation").isJsonNull()) {
        RateBook200ResponseDataCancellation.validateJsonObject(jsonObj.getAsJsonObject("cancellation"));
      }
      // validate the optional field `cancellationPolicies`
      if (jsonObj.get("cancellationPolicies") != null && !jsonObj.get("cancellationPolicies").isJsonNull()) {
        RateBook200ResponseDataCancellationPolicies.validateJsonObject(jsonObj.getAsJsonObject("cancellationPolicies"));
      }
      // validate the optional field `contact`
      if (jsonObj.get("contact") != null && !jsonObj.get("contact").isJsonNull()) {
        RateBook200ResponseDataContact.validateJsonObject(jsonObj.getAsJsonObject("contact"));
      }
      if ((jsonObj.get("createdAt") != null && !jsonObj.get("createdAt").isJsonNull()) && !jsonObj.get("createdAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdAt").toString()));
      }
      if ((jsonObj.get("end") != null && !jsonObj.get("end").isJsonNull()) && !jsonObj.get("end").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `end` to be a primitive type in the JSON string but got `%s`", jsonObj.get("end").toString()));
      }
      // validate the optional field `hotel`
      if (jsonObj.get("hotel") != null && !jsonObj.get("hotel").isJsonNull()) {
        RateBook200ResponseDataHotel.validateJsonObject(jsonObj.getAsJsonObject("hotel"));
      }
      if ((jsonObj.get("hotelConfirmationCode") != null && !jsonObj.get("hotelConfirmationCode").isJsonNull()) && !jsonObj.get("hotelConfirmationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hotelConfirmationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hotelConfirmationCode").toString()));
      }
      // validate the optional field `notes`
      if (jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) {
        RateBook200ResponseDataNotes.validateJsonObject(jsonObj.getAsJsonObject("notes"));
      }
      if ((jsonObj.get("start") != null && !jsonObj.get("start").isJsonNull()) && !jsonObj.get("start").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RateBook200ResponseData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RateBook200ResponseData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RateBook200ResponseData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RateBook200ResponseData.class));

       return (TypeAdapter<T>) new TypeAdapter<RateBook200ResponseData>() {
           @Override
           public void write(JsonWriter out, RateBook200ResponseData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RateBook200ResponseData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RateBook200ResponseData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RateBook200ResponseData
  * @throws IOException if the JSON string is invalid with respect to RateBook200ResponseData
  */
  public static RateBook200ResponseData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RateBook200ResponseData.class);
  }

 /**
  * Convert an instance of RateBook200ResponseData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

