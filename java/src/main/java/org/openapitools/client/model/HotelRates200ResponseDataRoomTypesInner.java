/*
 * nlite API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.HotelRates200ResponseDataRoomTypesInnerRatesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * HotelRates200ResponseDataRoomTypesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-10T16:56:49.845+01:00[Africa/Casablanca]")
public class HotelRates200ResponseDataRoomTypesInner {
  public static final String SERIALIZED_NAME_MAX_OCCUPANCY = "maxOccupancy";
  @SerializedName(SERIALIZED_NAME_MAX_OCCUPANCY)
  private BigDecimal maxOccupancy;

  public static final String SERIALIZED_NAME_RATES = "rates";
  @SerializedName(SERIALIZED_NAME_RATES)
  private List<HotelRates200ResponseDataRoomTypesInnerRatesInner> rates = null;

  public static final String SERIALIZED_NAME_ROOM_TYPE_ID = "roomTypeId";
  @SerializedName(SERIALIZED_NAME_ROOM_TYPE_ID)
  private String roomTypeId;

  public HotelRates200ResponseDataRoomTypesInner() {
  }

  public HotelRates200ResponseDataRoomTypesInner maxOccupancy(BigDecimal maxOccupancy) {
    
    this.maxOccupancy = maxOccupancy;
    return this;
  }

   /**
   * Get maxOccupancy
   * @return maxOccupancy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "")

  public BigDecimal getMaxOccupancy() {
    return maxOccupancy;
  }


  public void setMaxOccupancy(BigDecimal maxOccupancy) {
    this.maxOccupancy = maxOccupancy;
  }


  public HotelRates200ResponseDataRoomTypesInner rates(List<HotelRates200ResponseDataRoomTypesInnerRatesInner> rates) {
    
    this.rates = rates;
    return this;
  }

  public HotelRates200ResponseDataRoomTypesInner addRatesItem(HotelRates200ResponseDataRoomTypesInnerRatesInner ratesItem) {
    if (this.rates == null) {
      this.rates = new ArrayList<>();
    }
    this.rates.add(ratesItem);
    return this;
  }

   /**
   * Get rates
   * @return rates
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[{\"cancellationPolicies\":{\"cancelPolicyInfos\":[{\"amount\":204.33,\"cancelTime\":\"\",\"type\":\"amount\"}],\"hotelRemarks\":[\"Guests are required to show a photo identification and credit card upon check-in. Please note that all Special Requests are subject to availability and additional charges may apply. Swimming pool #1 is closed from Fri 22 Nov 2019 until Thu 30 Apr 2020 Swimming pool #2 is closed from Fri 22 Nov 2019 until Thu 30 Apr 2020 Swimming pool #1 is closed from Mon 22 Nov 2021 until Sat 30 Apr 2022 Swimming pool #2 is closed from Mon 22 Nov 2021 until Sat 30 Apr 2022\"],\"refundableTag\":\"NRFN\"},\"maxOccupancy\":0,\"name\":\"King Room with Disability Access - Hearing Accessible - single occupancy - Non-refundable\",\"rateId\":\"1_GI4DSMBWPQZDAMRTFUYDCLJRGV6DEMBSGMWTAMJNGE3HYML4PRGUC7CHJE2EIU2NIJLUOTKZINDU2SSYI5MVQRCBJVBFCR2BLFCECSK2KNEECNCUIFHFEVCHIJIFIU2OJJJEOVK2IRJU4USXJQ2FSVRWJVJTOR2BKJKEKT2CLJDUCM2DI5KEWQQ\",\"retailRate\":{\"taxesAndFees\":null,\"total\":[{\"amount\":172.55,\"currency\":\"USD\"}]}}]", value = "")

  public List<HotelRates200ResponseDataRoomTypesInnerRatesInner> getRates() {
    return rates;
  }


  public void setRates(List<HotelRates200ResponseDataRoomTypesInnerRatesInner> rates) {
    this.rates = rates;
  }


  public HotelRates200ResponseDataRoomTypesInner roomTypeId(String roomTypeId) {
    
    this.roomTypeId = roomTypeId;
    return this;
  }

   /**
   * Get roomTypeId
   * @return roomTypeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "GI4DSMBWGMYA", value = "")

  public String getRoomTypeId() {
    return roomTypeId;
  }


  public void setRoomTypeId(String roomTypeId) {
    this.roomTypeId = roomTypeId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HotelRates200ResponseDataRoomTypesInner hotelRates200ResponseDataRoomTypesInner = (HotelRates200ResponseDataRoomTypesInner) o;
    return Objects.equals(this.maxOccupancy, hotelRates200ResponseDataRoomTypesInner.maxOccupancy) &&
        Objects.equals(this.rates, hotelRates200ResponseDataRoomTypesInner.rates) &&
        Objects.equals(this.roomTypeId, hotelRates200ResponseDataRoomTypesInner.roomTypeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxOccupancy, rates, roomTypeId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HotelRates200ResponseDataRoomTypesInner {\n");
    sb.append("    maxOccupancy: ").append(toIndentedString(maxOccupancy)).append("\n");
    sb.append("    rates: ").append(toIndentedString(rates)).append("\n");
    sb.append("    roomTypeId: ").append(toIndentedString(roomTypeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("maxOccupancy");
    openapiFields.add("rates");
    openapiFields.add("roomTypeId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to HotelRates200ResponseDataRoomTypesInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!HotelRates200ResponseDataRoomTypesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HotelRates200ResponseDataRoomTypesInner is not found in the empty JSON string", HotelRates200ResponseDataRoomTypesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!HotelRates200ResponseDataRoomTypesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HotelRates200ResponseDataRoomTypesInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("rates") != null && !jsonObj.get("rates").isJsonNull()) {
        JsonArray jsonArrayrates = jsonObj.getAsJsonArray("rates");
        if (jsonArrayrates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rates` to be an array in the JSON string but got `%s`", jsonObj.get("rates").toString()));
          }

          // validate the optional field `rates` (array)
          for (int i = 0; i < jsonArrayrates.size(); i++) {
            HotelRates200ResponseDataRoomTypesInnerRatesInner.validateJsonObject(jsonArrayrates.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("roomTypeId") != null && !jsonObj.get("roomTypeId").isJsonNull()) && !jsonObj.get("roomTypeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roomTypeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roomTypeId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HotelRates200ResponseDataRoomTypesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HotelRates200ResponseDataRoomTypesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HotelRates200ResponseDataRoomTypesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HotelRates200ResponseDataRoomTypesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<HotelRates200ResponseDataRoomTypesInner>() {
           @Override
           public void write(JsonWriter out, HotelRates200ResponseDataRoomTypesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HotelRates200ResponseDataRoomTypesInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of HotelRates200ResponseDataRoomTypesInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of HotelRates200ResponseDataRoomTypesInner
  * @throws IOException if the JSON string is invalid with respect to HotelRates200ResponseDataRoomTypesInner
  */
  public static HotelRates200ResponseDataRoomTypesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HotelRates200ResponseDataRoomTypesInner.class);
  }

 /**
  * Convert an instance of HotelRates200ResponseDataRoomTypesInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

