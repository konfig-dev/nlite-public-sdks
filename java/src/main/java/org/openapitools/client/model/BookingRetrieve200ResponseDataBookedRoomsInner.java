/*
 * nlite API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import org.openapitools.client.model.BookingRetrieve200ResponseDataBookedRoomsInnerRate;
import org.openapitools.client.model.BookingRetrieve200ResponseDataBookedRoomsInnerRoomType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BookingRetrieve200ResponseDataBookedRoomsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-10T16:56:49.845+01:00[Africa/Casablanca]")
public class BookingRetrieve200ResponseDataBookedRoomsInner {
  public static final String SERIALIZED_NAME_ADULTS = "adults";
  @SerializedName(SERIALIZED_NAME_ADULTS)
  private BigDecimal adults;

  public static final String SERIALIZED_NAME_CHILD_COUNT = "childCount";
  @SerializedName(SERIALIZED_NAME_CHILD_COUNT)
  private BigDecimal childCount;

  public static final String SERIALIZED_NAME_RATE = "rate";
  @SerializedName(SERIALIZED_NAME_RATE)
  private BookingRetrieve200ResponseDataBookedRoomsInnerRate rate;

  public static final String SERIALIZED_NAME_ROOM_TYPE = "roomType";
  @SerializedName(SERIALIZED_NAME_ROOM_TYPE)
  private BookingRetrieve200ResponseDataBookedRoomsInnerRoomType roomType;

  public BookingRetrieve200ResponseDataBookedRoomsInner() {
  }

  public BookingRetrieve200ResponseDataBookedRoomsInner adults(BigDecimal adults) {
    
    this.adults = adults;
    return this;
  }

   /**
   * Get adults
   * @return adults
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2", value = "")

  public BigDecimal getAdults() {
    return adults;
  }


  public void setAdults(BigDecimal adults) {
    this.adults = adults;
  }


  public BookingRetrieve200ResponseDataBookedRoomsInner childCount(BigDecimal childCount) {
    
    this.childCount = childCount;
    return this;
  }

   /**
   * Get childCount
   * @return childCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "")

  public BigDecimal getChildCount() {
    return childCount;
  }


  public void setChildCount(BigDecimal childCount) {
    this.childCount = childCount;
  }


  public BookingRetrieve200ResponseDataBookedRoomsInner rate(BookingRetrieve200ResponseDataBookedRoomsInnerRate rate) {
    
    this.rate = rate;
    return this;
  }

   /**
   * Get rate
   * @return rate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BookingRetrieve200ResponseDataBookedRoomsInnerRate getRate() {
    return rate;
  }


  public void setRate(BookingRetrieve200ResponseDataBookedRoomsInnerRate rate) {
    this.rate = rate;
  }


  public BookingRetrieve200ResponseDataBookedRoomsInner roomType(BookingRetrieve200ResponseDataBookedRoomsInnerRoomType roomType) {
    
    this.roomType = roomType;
    return this;
  }

   /**
   * Get roomType
   * @return roomType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BookingRetrieve200ResponseDataBookedRoomsInnerRoomType getRoomType() {
    return roomType;
  }


  public void setRoomType(BookingRetrieve200ResponseDataBookedRoomsInnerRoomType roomType) {
    this.roomType = roomType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BookingRetrieve200ResponseDataBookedRoomsInner bookingRetrieve200ResponseDataBookedRoomsInner = (BookingRetrieve200ResponseDataBookedRoomsInner) o;
    return Objects.equals(this.adults, bookingRetrieve200ResponseDataBookedRoomsInner.adults) &&
        Objects.equals(this.childCount, bookingRetrieve200ResponseDataBookedRoomsInner.childCount) &&
        Objects.equals(this.rate, bookingRetrieve200ResponseDataBookedRoomsInner.rate) &&
        Objects.equals(this.roomType, bookingRetrieve200ResponseDataBookedRoomsInner.roomType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adults, childCount, rate, roomType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BookingRetrieve200ResponseDataBookedRoomsInner {\n");
    sb.append("    adults: ").append(toIndentedString(adults)).append("\n");
    sb.append("    childCount: ").append(toIndentedString(childCount)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("    roomType: ").append(toIndentedString(roomType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adults");
    openapiFields.add("childCount");
    openapiFields.add("rate");
    openapiFields.add("roomType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BookingRetrieve200ResponseDataBookedRoomsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BookingRetrieve200ResponseDataBookedRoomsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BookingRetrieve200ResponseDataBookedRoomsInner is not found in the empty JSON string", BookingRetrieve200ResponseDataBookedRoomsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!BookingRetrieve200ResponseDataBookedRoomsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BookingRetrieve200ResponseDataBookedRoomsInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `rate`
      if (jsonObj.get("rate") != null && !jsonObj.get("rate").isJsonNull()) {
        BookingRetrieve200ResponseDataBookedRoomsInnerRate.validateJsonObject(jsonObj.getAsJsonObject("rate"));
      }
      // validate the optional field `roomType`
      if (jsonObj.get("roomType") != null && !jsonObj.get("roomType").isJsonNull()) {
        BookingRetrieve200ResponseDataBookedRoomsInnerRoomType.validateJsonObject(jsonObj.getAsJsonObject("roomType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BookingRetrieve200ResponseDataBookedRoomsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BookingRetrieve200ResponseDataBookedRoomsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BookingRetrieve200ResponseDataBookedRoomsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BookingRetrieve200ResponseDataBookedRoomsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<BookingRetrieve200ResponseDataBookedRoomsInner>() {
           @Override
           public void write(JsonWriter out, BookingRetrieve200ResponseDataBookedRoomsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BookingRetrieve200ResponseDataBookedRoomsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BookingRetrieve200ResponseDataBookedRoomsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BookingRetrieve200ResponseDataBookedRoomsInner
  * @throws IOException if the JSON string is invalid with respect to BookingRetrieve200ResponseDataBookedRoomsInner
  */
  public static BookingRetrieve200ResponseDataBookedRoomsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BookingRetrieve200ResponseDataBookedRoomsInner.class);
  }

 /**
  * Convert an instance of BookingRetrieve200ResponseDataBookedRoomsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

