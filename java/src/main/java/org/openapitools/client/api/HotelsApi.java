/*
 * Lite API
 * lite api hotel booking api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.GetData200Response;
import org.openapitools.client.model.HotelsPostRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class HotelsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public HotelsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HotelsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getData
     * @param countryCode country code Alpha-2 code (example US, RU, CN) (required)
     * @param hotelName hotel name (optional)
     * @param cityName city name (optional)
     * @param limit limit results (max value 1000) (optional)
     * @param offset results offset (optional)
     * @param latitude latitude geo coordinates (optional)
     * @param longitude longtude geo coordinates (optional)
     * @param distance the distance starting from the selected geopgraphic point (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDataCall(String countryCode, String hotelName, String cityName, BigDecimal limit, BigDecimal offset, BigDecimal latitude, BigDecimal longitude, BigDecimal distance, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (hotelName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hotelName", hotelName));
        }

        if (cityName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cityName", cityName));
        }

        if (countryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countryCode", countryCode));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (distance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("distance", distance));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDataValidateBeforeCall(String countryCode, String hotelName, String cityName, BigDecimal limit, BigDecimal offset, BigDecimal latitude, BigDecimal longitude, BigDecimal distance, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'countryCode' is set
        if (countryCode == null) {
            throw new ApiException("Missing the required parameter 'countryCode' when calling getData(Async)");
        }

        return getDataCall(countryCode, hotelName, cityName, limit, offset, latitude, longitude, distance, _callback);

    }

    /**
     * Search by Destination/Hotel
     * 
     * @param countryCode country code Alpha-2 code (example US, RU, CN) (required)
     * @param hotelName hotel name (optional)
     * @param cityName city name (optional)
     * @param limit limit results (max value 1000) (optional)
     * @param offset results offset (optional)
     * @param latitude latitude geo coordinates (optional)
     * @param longitude longtude geo coordinates (optional)
     * @param distance the distance starting from the selected geopgraphic point (optional)
     * @return GetData200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetData200Response getData(String countryCode, String hotelName, String cityName, BigDecimal limit, BigDecimal offset, BigDecimal latitude, BigDecimal longitude, BigDecimal distance) throws ApiException {
        ApiResponse<GetData200Response> localVarResp = getDataWithHttpInfo(countryCode, hotelName, cityName, limit, offset, latitude, longitude, distance);
        return localVarResp.getData();
    }

    /**
     * Search by Destination/Hotel
     * 
     * @param countryCode country code Alpha-2 code (example US, RU, CN) (required)
     * @param hotelName hotel name (optional)
     * @param cityName city name (optional)
     * @param limit limit results (max value 1000) (optional)
     * @param offset results offset (optional)
     * @param latitude latitude geo coordinates (optional)
     * @param longitude longtude geo coordinates (optional)
     * @param distance the distance starting from the selected geopgraphic point (optional)
     * @return ApiResponse&lt;GetData200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetData200Response> getDataWithHttpInfo(String countryCode, String hotelName, String cityName, BigDecimal limit, BigDecimal offset, BigDecimal latitude, BigDecimal longitude, BigDecimal distance) throws ApiException {
        okhttp3.Call localVarCall = getDataValidateBeforeCall(countryCode, hotelName, cityName, limit, offset, latitude, longitude, distance, null);
        Type localVarReturnType = new TypeToken<GetData200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search by Destination/Hotel (asynchronously)
     * 
     * @param countryCode country code Alpha-2 code (example US, RU, CN) (required)
     * @param hotelName hotel name (optional)
     * @param cityName city name (optional)
     * @param limit limit results (max value 1000) (optional)
     * @param offset results offset (optional)
     * @param latitude latitude geo coordinates (optional)
     * @param longitude longtude geo coordinates (optional)
     * @param distance the distance starting from the selected geopgraphic point (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDataAsync(String countryCode, String hotelName, String cityName, BigDecimal limit, BigDecimal offset, BigDecimal latitude, BigDecimal longitude, BigDecimal distance, final ApiCallback<GetData200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDataValidateBeforeCall(countryCode, hotelName, cityName, limit, offset, latitude, longitude, distance, _callback);
        Type localVarReturnType = new TypeToken<GetData200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hotelsHotelIdGet
     * @param hotelId  (required)
     * @param rid  (optional)
     * @param xid  (optional)
     * @param checkin  (optional)
     * @param checkout  (optional)
     * @param adults  (optional)
     * @param guestNationality  (optional)
     * @param currency  (optional)
     * @param sessionId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Credentials -  <br>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Expose-Headers -  <br>  * Access-Control-Max-Age -  <br>  * Content-Type -  <br>  * Date -  <br>  * Transfer-Encoding -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Credentials -  <br>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Expose-Headers -  <br>  * Access-Control-Max-Age -  <br>  * Content-Type -  <br>  * Date -  <br>  * Content-Length -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call hotelsHotelIdGetCall(Integer hotelId, String rid, String xid, String checkin, String checkout, Integer adults, String guestNationality, String currency, String sessionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hotels/{hotelId}"
            .replace("{" + "hotelId" + "}", localVarApiClient.escapeString(hotelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (checkin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkin", checkin));
        }

        if (checkout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkout", checkout));
        }

        if (adults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("adults", adults));
        }

        if (guestNationality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("guestNationality", guestNationality));
        }

        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (sessionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sessionId", sessionId));
        }

        if (rid != null) {
            localVarHeaderParams.put("rid", localVarApiClient.parameterToString(rid));
        }

        if (xid != null) {
            localVarHeaderParams.put("xid", localVarApiClient.parameterToString(xid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hotelsHotelIdGetValidateBeforeCall(Integer hotelId, String rid, String xid, String checkin, String checkout, Integer adults, String guestNationality, String currency, String sessionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hotelId' is set
        if (hotelId == null) {
            throw new ApiException("Missing the required parameter 'hotelId' when calling hotelsHotelIdGet(Async)");
        }

        return hotelsHotelIdGetCall(hotelId, rid, xid, checkin, checkout, adults, guestNationality, currency, sessionId, _callback);

    }

    /**
     * Get Room Availability &amp; Rates for a Hotel ID
     * This endpoint allows you to send a hotel ID with a specific date range and in response receive all the rooms, rates that are available along with the cancelllation policies.
     * @param hotelId  (required)
     * @param rid  (optional)
     * @param xid  (optional)
     * @param checkin  (optional)
     * @param checkout  (optional)
     * @param adults  (optional)
     * @param guestNationality  (optional)
     * @param currency  (optional)
     * @param sessionId  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Credentials -  <br>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Expose-Headers -  <br>  * Access-Control-Max-Age -  <br>  * Content-Type -  <br>  * Date -  <br>  * Transfer-Encoding -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Credentials -  <br>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Expose-Headers -  <br>  * Access-Control-Max-Age -  <br>  * Content-Type -  <br>  * Date -  <br>  * Content-Length -  <br>  </td></tr>
     </table>
     */
    public Object hotelsHotelIdGet(Integer hotelId, String rid, String xid, String checkin, String checkout, Integer adults, String guestNationality, String currency, String sessionId) throws ApiException {
        ApiResponse<Object> localVarResp = hotelsHotelIdGetWithHttpInfo(hotelId, rid, xid, checkin, checkout, adults, guestNationality, currency, sessionId);
        return localVarResp.getData();
    }

    /**
     * Get Room Availability &amp; Rates for a Hotel ID
     * This endpoint allows you to send a hotel ID with a specific date range and in response receive all the rooms, rates that are available along with the cancelllation policies.
     * @param hotelId  (required)
     * @param rid  (optional)
     * @param xid  (optional)
     * @param checkin  (optional)
     * @param checkout  (optional)
     * @param adults  (optional)
     * @param guestNationality  (optional)
     * @param currency  (optional)
     * @param sessionId  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Credentials -  <br>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Expose-Headers -  <br>  * Access-Control-Max-Age -  <br>  * Content-Type -  <br>  * Date -  <br>  * Transfer-Encoding -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Credentials -  <br>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Expose-Headers -  <br>  * Access-Control-Max-Age -  <br>  * Content-Type -  <br>  * Date -  <br>  * Content-Length -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> hotelsHotelIdGetWithHttpInfo(Integer hotelId, String rid, String xid, String checkin, String checkout, Integer adults, String guestNationality, String currency, String sessionId) throws ApiException {
        okhttp3.Call localVarCall = hotelsHotelIdGetValidateBeforeCall(hotelId, rid, xid, checkin, checkout, adults, guestNationality, currency, sessionId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Room Availability &amp; Rates for a Hotel ID (asynchronously)
     * This endpoint allows you to send a hotel ID with a specific date range and in response receive all the rooms, rates that are available along with the cancelllation policies.
     * @param hotelId  (required)
     * @param rid  (optional)
     * @param xid  (optional)
     * @param checkin  (optional)
     * @param checkout  (optional)
     * @param adults  (optional)
     * @param guestNationality  (optional)
     * @param currency  (optional)
     * @param sessionId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Credentials -  <br>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Expose-Headers -  <br>  * Access-Control-Max-Age -  <br>  * Content-Type -  <br>  * Date -  <br>  * Transfer-Encoding -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Credentials -  <br>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Expose-Headers -  <br>  * Access-Control-Max-Age -  <br>  * Content-Type -  <br>  * Date -  <br>  * Content-Length -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call hotelsHotelIdGetAsync(Integer hotelId, String rid, String xid, String checkin, String checkout, Integer adults, String guestNationality, String currency, String sessionId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = hotelsHotelIdGetValidateBeforeCall(hotelId, rid, xid, checkin, checkout, adults, guestNationality, currency, sessionId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hotelsPost
     * @param rid  (optional)
     * @param hotelsPostRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Credentials -  <br>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Expose-Headers -  <br>  * Access-Control-Max-Age -  <br>  * Content-Type -  <br>  * Date -  <br>  * Content-Length -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Credentials -  <br>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Expose-Headers -  <br>  * Access-Control-Max-Age -  <br>  * Content-Type -  <br>  * Date -  <br>  * Content-Length -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Access-Control-Allow-Credentials -  <br>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Expose-Headers -  <br>  * Access-Control-Max-Age -  <br>  * Content-Type -  <br>  * Date -  <br>  * Content-Length -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call hotelsPostCall(String rid, HotelsPostRequest hotelsPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hotelsPostRequest;

        // create path and map variables
        String localVarPath = "/hotels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rid != null) {
            localVarHeaderParams.put("rid", localVarApiClient.parameterToString(rid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hotelsPostValidateBeforeCall(String rid, HotelsPostRequest hotelsPostRequest, final ApiCallback _callback) throws ApiException {
        return hotelsPostCall(rid, hotelsPostRequest, _callback);

    }

    /**
     * Get Minimum Price for Available Hotels
     * This endpoint allows you to send a list of hotel ID&#39;s for a specific date range and in response receive the best rate available for each of the hotel ID&#39;s. The limit is set to 200 hotels.
     * @param rid  (optional)
     * @param hotelsPostRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Credentials -  <br>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Expose-Headers -  <br>  * Access-Control-Max-Age -  <br>  * Content-Type -  <br>  * Date -  <br>  * Content-Length -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Credentials -  <br>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Expose-Headers -  <br>  * Access-Control-Max-Age -  <br>  * Content-Type -  <br>  * Date -  <br>  * Content-Length -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Access-Control-Allow-Credentials -  <br>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Expose-Headers -  <br>  * Access-Control-Max-Age -  <br>  * Content-Type -  <br>  * Date -  <br>  * Content-Length -  <br>  </td></tr>
     </table>
     */
    public Object hotelsPost(String rid, HotelsPostRequest hotelsPostRequest) throws ApiException {
        ApiResponse<Object> localVarResp = hotelsPostWithHttpInfo(rid, hotelsPostRequest);
        return localVarResp.getData();
    }

    /**
     * Get Minimum Price for Available Hotels
     * This endpoint allows you to send a list of hotel ID&#39;s for a specific date range and in response receive the best rate available for each of the hotel ID&#39;s. The limit is set to 200 hotels.
     * @param rid  (optional)
     * @param hotelsPostRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Credentials -  <br>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Expose-Headers -  <br>  * Access-Control-Max-Age -  <br>  * Content-Type -  <br>  * Date -  <br>  * Content-Length -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Credentials -  <br>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Expose-Headers -  <br>  * Access-Control-Max-Age -  <br>  * Content-Type -  <br>  * Date -  <br>  * Content-Length -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Access-Control-Allow-Credentials -  <br>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Expose-Headers -  <br>  * Access-Control-Max-Age -  <br>  * Content-Type -  <br>  * Date -  <br>  * Content-Length -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> hotelsPostWithHttpInfo(String rid, HotelsPostRequest hotelsPostRequest) throws ApiException {
        okhttp3.Call localVarCall = hotelsPostValidateBeforeCall(rid, hotelsPostRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Minimum Price for Available Hotels (asynchronously)
     * This endpoint allows you to send a list of hotel ID&#39;s for a specific date range and in response receive the best rate available for each of the hotel ID&#39;s. The limit is set to 200 hotels.
     * @param rid  (optional)
     * @param hotelsPostRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Credentials -  <br>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Expose-Headers -  <br>  * Access-Control-Max-Age -  <br>  * Content-Type -  <br>  * Date -  <br>  * Content-Length -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Credentials -  <br>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Expose-Headers -  <br>  * Access-Control-Max-Age -  <br>  * Content-Type -  <br>  * Date -  <br>  * Content-Length -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Access-Control-Allow-Credentials -  <br>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Expose-Headers -  <br>  * Access-Control-Max-Age -  <br>  * Content-Type -  <br>  * Date -  <br>  * Content-Length -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call hotelsPostAsync(String rid, HotelsPostRequest hotelsPostRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = hotelsPostValidateBeforeCall(rid, hotelsPostRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
