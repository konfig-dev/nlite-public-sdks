//
// BookingRetrieve200ResponseData.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct BookingRetrieve200ResponseData: Codable, JSONEncodable, Hashable {

    public var bookedRooms: [BookingRetrieve200ResponseDataBookedRoomsInner]?
    public var bookingId: String?
    public var cancellationPolicies: BookingRetrieve200ResponseDataCancellationPolicies?
    public var contact: BookingRetrieve200ResponseDataContact?
    public var createdAt: String?
    public var end: String?
    public var hotelConfirmationCode: String?
    public var start: String?
    public var status: String?

    public init(bookedRooms: [BookingRetrieve200ResponseDataBookedRoomsInner]? = nil, bookingId: String? = nil, cancellationPolicies: BookingRetrieve200ResponseDataCancellationPolicies? = nil, contact: BookingRetrieve200ResponseDataContact? = nil, createdAt: String? = nil, end: String? = nil, hotelConfirmationCode: String? = nil, start: String? = nil, status: String? = nil) {
        self.bookedRooms = bookedRooms
        self.bookingId = bookingId
        self.cancellationPolicies = cancellationPolicies
        self.contact = contact
        self.createdAt = createdAt
        self.end = end
        self.hotelConfirmationCode = hotelConfirmationCode
        self.start = start
        self.status = status
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case bookedRooms
        case bookingId
        case cancellationPolicies
        case contact
        case createdAt
        case end
        case hotelConfirmationCode
        case start
        case status
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(bookedRooms, forKey: .bookedRooms)
        try container.encodeIfPresent(bookingId, forKey: .bookingId)
        try container.encodeIfPresent(cancellationPolicies, forKey: .cancellationPolicies)
        try container.encodeIfPresent(contact, forKey: .contact)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(end, forKey: .end)
        try container.encodeIfPresent(hotelConfirmationCode, forKey: .hotelConfirmationCode)
        try container.encodeIfPresent(start, forKey: .start)
        try container.encodeIfPresent(status, forKey: .status)
    }
}

