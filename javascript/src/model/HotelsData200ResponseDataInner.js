/**
 * nlite API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HotelsData200ResponseDataInnerLocation from './HotelsData200ResponseDataInnerLocation';

/**
 * The HotelsData200ResponseDataInner model module.
 * @module model/HotelsData200ResponseDataInner
 * @version 1.0.0
 */
class HotelsData200ResponseDataInner {
    /**
     * Constructs a new <code>HotelsData200ResponseDataInner</code>.
     * @alias module:model/HotelsData200ResponseDataInner
     */
    constructor() { 
        
        HotelsData200ResponseDataInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HotelsData200ResponseDataInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HotelsData200ResponseDataInner} obj Optional instance to populate.
     * @return {module:model/HotelsData200ResponseDataInner} The populated <code>HotelsData200ResponseDataInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HotelsData200ResponseDataInner();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('creditcard_required')) {
                obj['creditcard_required'] = ApiClient.convertToType(data['creditcard_required'], 'Boolean');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('hotel_description')) {
                obj['hotel_description'] = ApiClient.convertToType(data['hotel_description'], 'String');
            }
            if (data.hasOwnProperty('hotel_important_information')) {
                obj['hotel_important_information'] = ApiClient.convertToType(data['hotel_important_information'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('is_closed')) {
                obj['is_closed'] = ApiClient.convertToType(data['is_closed'], 'Boolean');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = HotelsData200ResponseDataInnerLocation.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('zip')) {
                obj['zip'] = ApiClient.convertToType(data['zip'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HotelsData200ResponseDataInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HotelsData200ResponseDataInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['hotel_description'] && !(typeof data['hotel_description'] === 'string' || data['hotel_description'] instanceof String)) {
            throw new Error("Expected the field `hotel_description` to be a primitive type in the JSON string but got " + data['hotel_description']);
        }
        // ensure the json data is a string
        if (data['hotel_important_information'] && !(typeof data['hotel_important_information'] === 'string' || data['hotel_important_information'] instanceof String)) {
            throw new Error("Expected the field `hotel_important_information` to be a primitive type in the JSON string but got " + data['hotel_important_information']);
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          HotelsData200ResponseDataInnerLocation.validateJSON(data['location']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['zip'] && !(typeof data['zip'] === 'string' || data['zip'] instanceof String)) {
            throw new Error("Expected the field `zip` to be a primitive type in the JSON string but got " + data['zip']);
        }

        return true;
    }


}



/**
 * @member {String} address
 */
HotelsData200ResponseDataInner.prototype['address'] = undefined;

/**
 * @member {String} city
 */
HotelsData200ResponseDataInner.prototype['city'] = undefined;

/**
 * @member {String} country
 */
HotelsData200ResponseDataInner.prototype['country'] = undefined;

/**
 * @member {Boolean} creditcard_required
 */
HotelsData200ResponseDataInner.prototype['creditcard_required'] = undefined;

/**
 * @member {String} currency
 */
HotelsData200ResponseDataInner.prototype['currency'] = undefined;

/**
 * @member {String} hotel_description
 */
HotelsData200ResponseDataInner.prototype['hotel_description'] = undefined;

/**
 * @member {String} hotel_important_information
 */
HotelsData200ResponseDataInner.prototype['hotel_important_information'] = undefined;

/**
 * @member {Number} id
 */
HotelsData200ResponseDataInner.prototype['id'] = undefined;

/**
 * @member {Boolean} is_closed
 */
HotelsData200ResponseDataInner.prototype['is_closed'] = undefined;

/**
 * @member {module:model/HotelsData200ResponseDataInnerLocation} location
 */
HotelsData200ResponseDataInner.prototype['location'] = undefined;

/**
 * @member {String} name
 */
HotelsData200ResponseDataInner.prototype['name'] = undefined;

/**
 * @member {String} zip
 */
HotelsData200ResponseDataInner.prototype['zip'] = undefined;






export default HotelsData200ResponseDataInner;

